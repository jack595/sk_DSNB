# -*- coding:utf-8 -*-
# @Time: 2021/11/25 20:57
# @Author: Luo Xiaojie
# @Email: luoxj@ihep.ac.cn
# @File: GenHepevtfile.py

"""
This file is to generate hepevtfile so that we can input it into detector simulation,
which is like an advanced particle gun
"""

import numpy as np
import random

import sys
sys.path.append("/afs/ihep.ac.cn/users/l/luoxj/root_tool/python_script/")
from GetPhysicsProperty import PDGMassMap

class GenHepevtfile:
    R_detector = 17.5e3 # mm
    def __init__(self,list_pdgid ,seed=0, p_option:str="uniform", vertex_option:str="z_uniform"):
        self.map_pdg = PDGMassMap()
        self.p_option = p_option
        self.seed = seed
        random.seed(self.seed)
        self.vertex_option = vertex_option
        self.list_pdgid = list_pdgid
        self.n_particles = len(list_pdgid)

    def GetVertex(self, option:str="z_uniform"):
        """

        :param option: ["z_uniform",..]
        :return: vertex ( x, y, z ) # mm
        """
        if option == 'z_uniform':
            x, y, z = 0.0, 0.0, random.uniform(-self.R_detector, self.R_detector)
        else:
            print(f"Option {option} is not available for vertex generation!!!")
            exit(1)
        return " {} {} {} ".format( x, y, z )

    @staticmethod
    def PolarToXYZ(theta, phi):
        px = np.sin(theta) * np.cos(phi)
        py = np.sin(theta) * np.sin(phi)
        pz = np.cos(theta)
        return ( px, py, pz )

    def GetMomentumDirection(self,momentum ,option:str="uniform", theta_fix=0, phi_fix=0):
        """

        :param option: ["theta_uniform", "phi_uniform", "uniform"]
        :param momentum: GeV
        :return:
        """
        if option == "uniform":
            phi = np.random.uniform(0,np.pi*2)
            costheta = np.random.uniform(-1,1)
            theta = np.arccos( costheta )
            (px, py, pz) = self.PolarToXYZ(theta, phi)
        elif option == "theta_uniform":
            phi = phi_fix
            costheta = np.random.uniform(-1,1)
            theta = np.arccos( costheta )
            (px, py, pz) = self.PolarToXYZ(theta, phi)
        elif option == "phi_uniform":
            phi = np.random.uniform(0, np.pi * 2)
            (px, py, pz) = self.PolarToXYZ(theta_fix, phi)
        else:
            print(f"{option} is not available for Momentum direction!!!")
            exit(1)
        px *= momentum
        py *= momentum
        pz *= momentum
        return f" {px} {py} {pz}"

    def GetMass(self, pdgid:int):
        return self.map_pdg.PDGToMass(pdgid)/1000

    def GetGenerateTime(self):
        return 0.0

    def WriteHepEvtFile(self, name_file_generator:str, momentum:float ,n_events_to_write:int=100):
        Instruction = \
f"""# File generated by GenHepevet.py
# Ransom seed for generator = {self.seed}.
# Events number = {n_events_to_write}.
# The last 7 numbers in one line are:
# momentum vector (GeV), mass (GeV),Emission Time and position offset vector(mm).
"""
        with open(name_file_generator, "w") as f:
            f.write(Instruction)

        with open(name_file_generator, "a") as f:
            for i in range(n_events_to_write):
                line_in_txt = f"{self.n_particles}\n"
                for pdgid in self.list_pdgid:
                    line_in_txt += f"1\t{pdgid} 0 0 {self.GetMomentumDirection(momentum, self.p_option)} {self.GetMass(int(pdgid))} " \
                                   f"{self.GetGenerateTime()} {self.GetVertex(self.vertex_option)}\n"
                    f.write(line_in_txt)

if __name__ == '__main__':
    import argparse
    parser = argparse.ArgumentParser(description='Advanced Particle Gun Generator')
    parser.add_argument("--seed", "-s", type=int, default=0, help="Random Seed for Generator" )
    parser.add_argument("--p_option", type=str, default="uniform", help="momentum option for Generator")
    parser.add_argument("--vertex_option", "-v", type=str, default="z_uniform", help="vertex option for Generator")
    parser.add_argument("--pdgid_list", "-l", nargs="+", help="list for generator in one event",required=True)
    parser.add_argument("--output", "-o", type=str, default="try.txt", help="name of output file")
    parser.add_argument("--momentum", "-p",type=float, default=1.0, help="Amplitude for momentum ( GeV )")
    parser.add_argument("--evt", "-n", type=int, default=10, help="number of events to generate")
    args = parser.parse_args()
    
    gen_particle_gun = GenHepevtfile(list_pdgid=args.pdgid_list, seed=args.seed, p_option=args.p_option,
                                     vertex_option=args.vertex_option)

    gen_particle_gun.WriteHepEvtFile(args.output, args.momentum, args.evt)








